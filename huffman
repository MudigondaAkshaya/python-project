from matplotlib import pyplot as plt
from tkinter import *
from tkinter import simpledialog
from tkinter.filedialog import askopenfilename
import tkinter
from tkinter import filedialog
from HuffmanDataLZW import HuffmanLZWCoding
import os
import LZWImageCompression
from LZWImageCompression import *
import cv2
root = tkinter.Tk()
root.title("Huffman Based LZW Lossless Image Compression Using Retinex Algorithm")
root.geometry("1000x500")
global filename
global normal
global compress
def uploadText():
    global filename
    filename = askopenfilename(initialdir = "TextFiles")
    trainpath.config(text=filename+' loaded')
def compressDecompressText():
    global normal
    global compress
    h = HuffmanLZWCoding(filename)
    output_path = h.compressHuffman()
    h.decompressHuffman(output_path)
    normal = os.stat(filename).st_size
    compress = os.stat(output_path).st_size
    trainpath.config(text=filename+' original size : '+str(normal)+' & its compress size : '+str(compress))
def uploadImage():
    global filename
    filename = askopenfilename(initialdir = "ImageFiles")
    trainpath.config(text=filename+' loaded')
def compressImage():
    global normal
    global compress
    LZWImageCompression.huffmanImageCompression(filename)
    normal = os.stat(filename).st_size
    compress = os.stat('compress/Compress.jpg').st_size
    original_image = cv2.imread(filename)
    original_image = cv2.resize(original_image,(500,500))
    compress_image = cv2.imread('compress/Compress.jpg')
    compress_image = cv2.resize(compress_image,(500,500))
    retinex_compress_image = cv2.imread('compress/retinex_Compress.jpg')
    retinex_compress_image = cv2.resize(retinex_compress_image,(500,500))
    cv2.imshow("Original Image & its Size : "+str(normal),original_image);
    cv2.imshow("Compress Image & its Size : "+str(compress),compress_image);
    cv2.imshow("Retinex Compress Image & its Size : "+str(compress),retinex_compress_image);
    cv2.waitKey();
def graph():
    height = [normal,compress]
    bars = ('Normal File Size','Compress File Size')
    y_pos = numpy.arange(len(bars))
    plt.bar(y_pos, height)
    plt.xticks(y_pos, bars)
    plt.show()
def close():
    root.destroy()
ttt = Label(root)
ttt.grid(row=0)
ttt1 = Label(root)
ttt1.grid(row=3)
font = ('times', 14, 'bold')
uploadTextButton = Button(root, text="Upload Text File", command=uploadText)
uploadTextButton.grid(row=0)
uploadTextButton.config(font=font) 
trainpath = Label(root)
trainpath.grid(row=6)
trainpath.config(font=font)
textButton = Button(root, text="Compress & Decompress Text File", command=compressDecompressText)
textButton.grid(row=9)
textButton.config(font=font)
tt = Label(root)
tt.grid(row=12)
uploadimageButton = Button(root, text="Upload Image", command=uploadImage)
uploadimageButton.grid(row=15)
uploadimageButton.config(font=font)
tt1 = Label(root)
tt1.grid(row=18)
imageButton = Button(root, text="Compress Image & Apply Retinex", command=compressImage)
imageButton.grid(row=21)
imageButton.config(font=font)
tt2 = Label(root)
tt2.grid(row=24)
graphButton = Button(root, text="Comparison Graph", command=graph)
graphButton.grid(row=27)
graphButton.config(font=font)
tt3 = Label(root)
tt3.grid(row=30)
closeButton = Button(root, text="Close Application", command=close)
closeButton.grid(row=33)
closeButton.config(font=font)
root.mainloop()

LZWCompression.py

import io
from PIL import Image
import numpy
import matplotlib.pyplot as plt
import cv2
from collections import defaultdict
import os
img_pixels = defaultdict(list)
global height
global width
def huffmanCompress(compressed_image):
    # building dictionary here.
    dictionary_size = 256
    dictionary_arr = dict((i, chr(i)) for i in range(dictionary_size))
    results = io.StringIO()
    pixel = chr(compressed_image.pop(0))
    results.write(pixel)
    for m in compressed_image:
        if m in dictionary_arr:
            entry_pixel = dictionary_arr[m]
        elif m == dictionary_size:
            entry_pixel = pixel + pixel[0]
        else:
            raise ValueError('Bad compression m: %s' % m)
        results.write(entry_pixel)
        # Adding pixel to the dictionary.
        dictionary_arr[dictionary_size] = pixel + entry_pixel[0]
        dictionary_size += 1
        pixel = entry_pixel
    return results.getvalue()
def huffmanCompressDict(uncompressed_image):
    dictionary_size = 256
    dictionary_arr = dict((chr(i), i) for i in range(dictionary_size))
    pixel = ""
    results = []
    for chars in uncompressed_image:
        pixel_chars = pixel + chars
        if pixel_chars in dictionary_arr:
            pixel = pixel_chars
        else:
            results.append(dictionary_arr[pixel])
            dictionary_arr[pixel_chars] = dictionary_size
            dictionary_size += 1
            pixel = chars
    new_dictionary = list(dictionary_arr.items())
    if pixel:
        results.append(dictionary_arr[pixel])
    return results
def Retinex(image, gamma_value=0.5):
    inv_Gamma = 1.0 / gamma_value
    lookup_colour_improve_table = numpy.array([((i / 255.0) ** inv_Gamma) * 255 for i in numpy.arange(0, 256)]).astype("uint8")
    return cv2.LUT(image, lookup_colour_improve_table)
def LZWEncodeImage(codes,image_name,retinex_image):
    pixel_list = []
    for code in codes:
        pixel_list.append(ord(code))
    arr = numpy.asarray(pixel_list)
    img = arr.reshape(height,width)
    print(img.shape)
    orig = numpy.zeros((height,width,3))
    for i in range(width):
        for j in range(height):
            value = int(img[j,i])
            values = img_pixels.get(str(i)+","+str(j))
            if values is not None:
                values = values[0]
                r = values[0]
                g = values[1]
                b = values[2]
                orig[j][i][0] = b
                orig[j][i][1] = g
                orig[j][i][2] = r
    cv2.imwrite(image_name, orig,[cv2.IMWRITE_JPEG_QUALITY, 35])
    img = cv2.imread(image_name)            
    img = Retinex(img)            
    cv2.imwrite(retinex_image, img,[cv2.IMWRITE_JPEG_QUALITY, 45])  
def compressImage(uncompress_image):
    compress_image = huffmanCompressDict(uncompress_image)
    arr = numpy.asarray(compress_image)
    arr1 = numpy.zeros(10000)
    for i in range(len(arr1)):
        arr1[i] = arr[i]
    compress_image = huffmanCompress(compress_image)
LZWEncodeImage(compress_image,'compress/Compress.jpg','compress/retinex_Compress.jpg')
def getImagePixels(image_path):
    global height
    global width
    input_image = Image.open(image_path)
    pixels = input_image.load() 
    widths, heights = input_image.size
    width = widths
    height = heights
    pixels_arr = []
    for i in range(widths):
        for j in range(heights):
            color_pixel = pixels[i, j]
            gray_value = int(round(sum(color_pixel) / float(len(color_pixel))))
            img_pixels[str(i)+","+str(j)].append(color_pixel)
            pixels_arr.append(gray_value)
      return pixels_arr

def huffmanImageCompression(input_image):
    img_pixels.clear()
    pixel_values = []
    for p in getImagePixels(input_image):
        pixel_values.append(p)
    pixelString = []
    String_pixel = ""
    for f in pixel_values:
        pixelString.append(chr(f))
    for ps in pixelString:
        String_pixel +=str(ps)
    compressImage(String_pixel)
#huffmanImageCompression('images.jpg')
#original_size = os.stat('images.jpg').st_size
#compress_size = os.stat('Compress.jpg').st_size
#original_image = cv2.imread('images.jpg')
#original_image = cv2.resize(original_image,(500,500))
#compress_image = cv2.imread('Compress.jpg')
#compress_image = cv2.resize(compress_image,(500,500))
#cv2.imshow("Original Image & its Size : "+str(original_size),original_image);
#cv2.imshow("Compress Image & its Size : "+str(compress_size),compress_image);
#cv2.waitKey();

HuffmanDataLZW.py

import heapq
import os
from functools import total_ordering
@total_ordering
class TreeNode:
        def __init__(self, chars, frequency):
                self.chars = chars
                self.frequency = frequency
                self.leftNode = None
                self.rightNode = None
        def __lt__(self, othernode):
                return self.frequency < othernode.frequency
        def __eq__(self, othernode):
                if(othernode == None):
                        return False
                if(not isinstance(othernode, TreeNode)):
                        return False
                return self.frequency == other.frequency
class HuffmanLZWCoding:
	def __init__(self, filepath):
		self.filepath = filepath
		self.heap_arr = []
		self.codes_arr = {}
		self.reverse_mapping_arr = {}
	# functions for compression:
	def huffman_dict(self, text_char):
		frequency_arr = {}
		for characters in text_char:
			if not characters in frequency_arr:
				frequency_arr[characters] = 0
			frequency_arr[characters] += 1
		return frequency_arr
	def addNode(self, frequency_arr):
		for keys in frequency_arr:
			treenode = TreeNode(keys, frequency_arr[keys])
			heapq.heappush(self.heap_arr, treenode)
	def mergeNodes(self):
		while(len(self.heap_arr)>1):
			node1 = heapq.heappop(self.heap_arr)
			node2 = heapq.heappop(self.heap_arr)
			mergednode = TreeNode(None, node1.frequency + node2.frequency)
			mergednode.leftnode = node1
			mergednode.rightnode = node2
			heapq.heappush(self.heap_arr, mergednode)
	def createCode(self, rootnode, currentcode):
		if(rootnode == None):
			return
		if(rootnode.chars != None):
			self.codes_arr[rootnode.chars] = currentcode
			self.reverse_mapping_arr[currentcode] = rootnode.chars
			return
		self.createCode(rootnode.leftnode, currentcode + "0")
		self.createCode(rootnode.rightnode, currentcode + "1")
         def addCodes(self):
		rootnode = heapq.heappop(self.heap_arr)
		currentcode = ""
		self.createCode(rootnode, currentcode)
       def LZW_encoded_text(self, textdata):
		encodedtext = ""
		for characters in textdata:
			encodedtext += self.codes_arr[characters]
		return encodedtext
	def LZWpad_encoded_text(self, encodedtext):
		extrapadding = 8 - len(encodedtext) % 8
		for i in range(extrapadding):
			encodedtext += "0"
		paddedinfo = "{0:08b}".format(extrapadding)
		encodedtext = paddedinfo + encodedtext
		return encodedtext
	def LZW_byte_array(self, paddedencoded_text):
		if(len(paddedencoded_text) % 8 != 0):
			print("Encoding textdata not properly padded")
			exit(0)
		b_arr = bytearray()
		for i in range(0, len(paddedencoded_text), 8):
			byte = paddedencoded_text[i:i+8]
			b_arr.append(int(byte, 2))
		return b_arr
	def compressHuffman(self):
		input_file, file_extension = os.path.splitext(self.filepath)
		outputpath = "compress/compress.bin"
		with open(self.filepath, 'r+') as file, open(outputpath, 'wb') as output:
			textdata = file.read()
			textdata = textdata.rstrip 
()
			frequency_arr = self.huffman_dict(textdata)
			self.addNode(frequency_arr)
			self.mergeNodes()
			self.addCodes()
			encodedText = self.LZW_encoded_text(textdata)
			paddedencoded_text = self.LZWpad_encoded_text(encodedText)
			b_arr = self.LZW_byte_array(paddedencoded_text)
			output.write(bytes(b_arr))
		print("Compression Completed")
		return outputpath
	""" functions for decompression: """
	def removePadding(self, paddedencoded_text):
		paddedInfo = paddedencoded_text[:8]
		extraPadding = int(paddedInfo, 2)
		paddedencoded_text = paddedencoded_text[8:] 
		encodedText = paddedencoded_text[:-1*extraPadding]
		return encodedText
	def textDecode(self, encodedText):
		currentCode = ""
		decodedText = ""
		for bits in encodedText:
			currentCode += bits
			if(currentCode in self.reverse_mapping_arr):
				characters = self.reverse_mapping_arr[currentCode]
				decodedText += characters
				currentCode = ""
		return decodedText
	def decompressHuffman(self, inputPath):
                inputfile, file_extension = os.path.splitext(self.filepath)
                outputPath = "compress/decompress.txt"
                print(outputPath)
                with open(inputPath, 'rb') as file, open(outputPath, 'w') as output:
                        bitStrings = ""
                        bytes = file.read(1)
                        while(len(bytes) > 0):
                                bytes = ord(bytes)
                                bit = bin(bytes)[2:].rjust(8, '0')
                                bitStrings += bit
                                bytes = file.read(1)
                        encodedText = self.removePadding(bitStrings)
                        decompressedText = self.textDecode(encodedText)
                        output.write(decompressedText)
                print("Decompression Process Completed")
                return outputPath


